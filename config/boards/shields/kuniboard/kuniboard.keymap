/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "../../../includes/keys_de_osx.h"
#include "../../../includes/keys_de.h"
#include "../../../includes/keypos_36keys.h"
#include "../../../includes/helper.h"

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 

#define BASE 0
#define MOD 1
#define NUM 2
#define BASE_OSX 3
#define MOD_OSX 4
#define NUM_OSX 5
#define ADJ 6

ZMK_BEHAVIOR(hml, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_BEHAVIOR(hmr, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/ {
    behaviors {
        quote: single_double_quote {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DE_SQT>, <&kp DE_DQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        acu_grv: acute_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DE_ACUTE>, <&kp DE_GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        sz: sz_cap_sz  {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DE_SZ>, <&kp DE_CAPITAL_SZ>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        slh_qu: flsh_qmark  {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DE_FSLH>, <&kp DE_QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        lbkt {
            timeout-ms = <50>;
            key-positions = <LT1 LT2>;
            bindings = <&kp DE_LBKT>;
            layers = <0>;
        };
        rbkt {
            timeout-ms = <50>;
            key-positions = <RT1 RT2>;
            bindings = <&kp DE_RBKT>;
            layers = <0>;
        };
        lpar {
            timeout-ms = <50>;
            key-positions = <LM1 LM2>;
            bindings = <&kp DE_LPAR>;
            layers = <0>;
        };
        rpar {
            timeout-ms = <50>;
            key-positions = <RM1 RM2>;
            bindings = <&kp DE_RPAR>;
            layers = <0>;
        };
        lbrc {
            timeout-ms = <50>;
            key-positions = <LB1 LB2>;
            bindings = <&kp DE_LBRC>;
            layers = <0>;
        };
        rbrc {
            timeout-ms = <50>;
            key-positions = <RB1 RB2>;
            bindings = <&kp DE_RBRC>;
            layers = <0>;
        };
        compatible = "zmk,combos";
        lbkt_osx {
            timeout-ms = <50>;
            key-positions = <LT1 LT2>;
            bindings = <&kp DE_OSX_LBKT>;
            layers = <3>;
        };
        rbkt_osx {
            timeout-ms = <50>;
            key-positions = <RT1 RT2>;
            bindings = <&kp DE_OSX_RBKT>;
            layers = <3>;
        };
        lpar_osx {
            timeout-ms = <50>;
            key-positions = <LM1 LM2>;
            bindings = <&kp DE_OSX_LPAR>;
            layers = <3>;
        };
        rpar_osx {
            timeout-ms = <50>;
            key-positions = <RM1 RM2>;
            bindings = <&kp DE_OSX_RPAR>;
            layers = <3>;
        };
        lbrc_osx {
            timeout-ms = <50>;
            key-positions = <LB1 LB2>;
            bindings = <&kp DE_OSX_LBRC>;
            layers = <3>;
        };
        rbrc_osx {
            timeout-ms = <50>;
            key-positions = <RB1 RB2>;
            bindings = <&kp DE_OSX_RBRC>;
            layers = <3>;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <6>;
        };
        tri_layer_osx {
            if-layers = <4 5>;
            then-layer = <6>;
        };
    };
};

&mt {
    flavor = "balanced";
    quick-tap-ms = <200>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <200>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Colemak DH Mod";
            bindings = <
                &kp DE_Q        &kp DE_W        &kp DE_F        &kp DE_P        &kp DE_B        &kp DE_J        &kp DE_L        &kp DE_U        &kp DE_Z        &slh_qu   
                &hml LGUI DE_A  &hml LALT DE_S  &hml LCTRL DE_R &hml LSHFT DE_T &kp DE_G        &kp DE_M        &hml RSHFT DE_N &hml RCTRL DE_E &hml LALT DE_I  &hml RGUI DE_O
                &kp DE_Y        &kp DE_X        &kp DE_C        &kp DE_D        &kp DE_V        &kp DE_K        &kp DE_H        &kp DE_COMMA    &kp DE_DOT      &kp DE_MINUS
                                &kp TAB         &lt MOD BSPC    &kp ENTER       &lt NUM DEL     &mt RSHFT SPACE &kp ESC
            >;
        };

        mod_layer {
            label = "Umlaute and Modifiers";
            bindings = <
                &kp DE_AT       &quote          &acu_grv        &kp DE_DLLR     &kp DE_PRCNT    &kp DE_AMPS     &kp DE_L        &kp DE_UE       &kp DE_Z        &kp DE_BSLH   
                &kp DE_AE       &sz             &trans          &kp LEFT        &kp UP          &kp DOWN        &kp RIGHT       &kp DE_N        &kp DE_HASH     &kp DE_OE
                &kp DE_PIPE     &kp DE_TILDE    &kp DE_CARET    &trans          &trans          &trans          &trans          &kp DE_LT       &kp DE_GT       &kp DE_PLUS
                                &trans          &trans          &trans          &trans          &caps_word          &trans
             >;
        };

        num_layer {
            label = "Numbers";
            bindings = <
                &kp DE_N1       &kp DE_N2       &kp DE_N3       &trans          &trans          &kp DE_EQUAL    &kp DE_PLUS     &kp DE_MINUS    &kp DE_ASTRK    &trans
                &kp DE_N4       &kp DE_N5       &kp DE_N6       &kp HOME        &kp PG_UP       &kp PG_DN       &kp END         &trans          &trans          &trans
                &kp DE_N7       &kp DE_N8       &kp DE_N9       &kp DE_N0       &trans          &trans          &trans          &trans          &trans          &trans
                                &trans          &trans          &trans          &trans          &trans          &trans
            >;
        };

        base_osx_layer {
            label = "ColemakOSX";
            bindings = <
                &kp DE_OSX_Q        &kp DE_OSX_W        &kp DE_OSX_F        &kp DE_OSX_P        &kp DE_OSX_B        &kp DE_OSX_J        &kp DE_OSX_L        &kp DE_OSX_U        &kp DE_OSX_Z        &slh_qu   
                &hml LGUI DE_OSX_A  &hml LALT DE_OSX_S  &hml LCTRL DE_OSX_R &hml LSHFT DE_OSX_T &kp DE_OSX_G        &kp DE_OSX_M        &hml RSHFT DE_OSX_N &hml RCTRL DE_OSX_E &hml RALT DE_OSX_I  &hml RGUI DE_OSX_O
                &kp DE_OSX_Y        &kp DE_OSX_X        &kp DE_OSX_C        &kp DE_OSX_D        &kp DE_OSX_V        &kp DE_OSX_K        &kp DE_OSX_H        &kp DE_OSX_COMMA    &kp DE_OSX_DOT      &kp DE_OSX_MINUS
                                    &kp TAB             &lt MOD_OSX BSPC    &kp ENTER           &lt NUM_OSX DEL     &mt RSHFT SPACE     &kp ESC
            >;
        };

        mod_osx_layer {
            label = "Umlaute and Modifiers OSX";
            bindings = <
                &kp DE_OSX_AT       &quote              &acu_grv            &kp DE_OSX_DLLR     &kp DE_OSX_PRCNT    &kp DE_OSX_AMPS     &kp DE_OSX_L        &kp DE_OSX_UE       &kp DE_OSX_Z        &kp DE_OSX_BSLH   
                &kp DE_OSX_AE       &sz                 &trans              &kp LEFT            &kp UP              &kp DOWN            &kp RIGHT           &kp DE_OSX_N        &kp DE_OSX_HASH     &kp DE_OSX_OE
                &kp DE_OSX_PIPE     &kp DE_OSX_TILDE    &kp DE_OSX_CARET    &trans              &trans              &trans              &trans              &kp DE_OSX_LT       &kp DE_OSX_GT       &kp DE_OSX_PLUS
                                    &trans              &trans              &trans              &trans              &trans              &trans
             >;
        };

        num_osx_layer {
            label = "Numbers OSX";
            bindings = <
                &kp DE_OSX_N1       &kp DE_OSX_N2       &kp DE_OSX_N3       &trans              &trans              &kp DE_OSX_EQUAL    &kp DE_OSX_PLUS     &kp DE_OSX_MINUS    &kp DE_OSX_ASTRK    &trans   
                &kp DE_OSX_N4       &kp DE_OSX_N5       &kp DE_OSX_N6       &kp HOME            &kp PG_UP           &kp PG_DN           &kp END             &trans              &trans              &trans
                &kp DE_OSX_N7       &kp DE_OSX_N8       &kp DE_OSX_N9       &kp DE_OSX_N0       &trans              &trans              &trans              &trans              &trans              &trans
                                    &trans              &trans              &trans              &trans              &trans              &trans
            >;
        };

        adj_layer {
            label = "FN Keys and BT CTR";
            bindings = <
                &kp F1          &kp F2          &kp F3          &kp F10         &bt BT_NXT      &tog BASE_OSX   &trans          &trans          &trans          &trans   
                &kp F4          &kp F5          &kp F6          &kp F11         &bt BT_PRV      &out OUT_TOG    &trans          &trans          &trans          &trans
                &kp F7          &kp F8          &kp F9          &kp F12         &bt BT_CLR      &bt BT_CLR_ALL  &trans          &trans          &trans          &trans
                                &trans          &trans          &trans          &trans          &trans          &trans
            >;
        };
    };
};